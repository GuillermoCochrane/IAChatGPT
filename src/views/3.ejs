<%- include("./partials/header.ejs") %>
    
    <article>
    <h2 id="learnign">Machine Learning y Redes Neuronales</h2>
    <h3>¿Qué es y cómo funciona el Machine Learning?</h3>
    <p>El Machine Learning es una rama de la inteligencia artificial que se enfoca en el desarrollo de algoritmos y modelos que permiten a las computadoras aprender de los datos y tomar decisiones sin ser programadas explícitamente para realizar una tarea específica. En lugar de seguir reglas predefinidas, los algoritmos de Machine Learning utilizan datos para aprender patrones y tomar decisiones informadas.</p> 
    <p>El proceso básico de Machine Learning consta de varias etapas:</p>
    <ol>
        <li><strong>Adquisición de Datos:</strong> En esta etapa, se recopilan y preparan los datos necesarios para el entrenamiento del modelo. Estos datos pueden provenir de diversas fuentes, como bases de datos, sensores, archivos CSV, etc.</li>
        <li><strong>Preprocesamiento de Datos:</strong> Los datos se preprocesan para eliminar ruido, manejar valores faltantes y convertirlos en un formato adecuado para el modelo de Machine Learning.</li>
        <li><strong>Selección de Características:</strong> Se seleccionan las características relevantes que se utilizarán para entrenar el modelo. Esto puede implicar la extracción de características útiles de los datos brutos.</li>
        <li><strong>Entrenamiento del Modelo:</strong> En esta etapa, el modelo de Machine Learning se entrena utilizando un algoritmo específico y los datos de entrenamiento. Durante el entrenamiento, el modelo ajusta sus parámetros para minimizar el error en la predicción.</li>
        <li><strong>Validación y Evaluación:</strong> Una vez que el modelo está entrenado, se evalúa su rendimiento utilizando datos de validación o prueba. Se calculan métricas de rendimiento para determinar la precisión y la eficacia del modelo.</li>
        <li><strong>Ajuste del Modelo:</strong>Si es necesario, se realizan ajustes adicionales al modelo para mejorar su rendimiento, como la optimización de hiperparámetros o la selección de un algoritmo diferente.</li>
        <li><strong>Despliegue y Uso:</strong> Finalmente, el modelo entrenado se despliega en un entorno de producción y se utiliza para hacer predicciones o tomar decisiones en tiempo real.</li>
    </ol>
    
    <h3 id="redes">¿Qué son y cómo funcionan las Redes Neuronales?</h3>
    <p>Las redes neuronales son un conjunto de algoritmos y modelos inspirados en la estructura y funcionamiento del cerebro humano. Están diseñadas para reconocer patrones y procesar información de manera similar a como lo hacen las neuronas en el cerebro. Se componen de capas de nodos interconectados, cada uno de los cuales realiza operaciones matemáticas en los datos de entrada y transfiere la información a través de la red.</p> 
    <h4>Elementos clave de las redes neuronales:</h4>
    <ul>
        <li><strong>Neuronas (nodos): </strong>Son unidades básicas que reciben información, realizan cálculos y transmiten resultados a nodos posteriores. Cada neurona está asociada con una función de activación que determina su salida en función de la información que recibe.</li>
        <li><strong>Pesos y conexiones:</strong>Las conexiones entre las neuronas tienen pesos asignados. Estos pesos representan la importancia o la fuerza de la conexión entre dos nodos y se ajustan durante el entrenamiento de la red para mejorar su capacidad predictiva.</li>
        <li><strong>CAPAS:</strong> Las redes neuronales se componen de múltiples capas:
            <ul>
                <li><strong>Capa de entrada:</strong>Recibe datos de entrada.</li>
                <li><strong>Capas ocultas (intermedias):</strong> Realizan cálculos complejos para procesar la información.</li>
                <li><strong>Capa de salida:</strong> Produce los resultados finales.</li>
            </ul>
        </li>
    </ul>
    <h4>El funcionamiento de una red neuronal se basa en la propagación hacia adelante (forward propagation) y la propagación hacia atrás (backpropagation):</h4>
    <ul>
        <li><strong>Propagación hacia Adelante:</strong> Durante esta etapa, los datos de entrada se introducen en la red neuronal a través de la capa de entrada. Los datos se propagan a través de las capas ocultas, donde se realizan cálculos ponderados y se aplican funciones de activación para generar una salida.</li>
        <li><strong>Backpropagation:</strong> Una vez que se genera la salida, se compara con la salida deseada para calcular el error de predicción. Este error se propaga hacia atrás a través de la red, ajustando los pesos de las conexiones para minimizar el error.</li>
    </ul>
    <h4>El entrenamiento de una red neuronal implica los siguientes pasos:</h4>
    <ul>
        <li><strong>Inicialización de pesos:</strong> Se asignan valores aleatorios a los pesos y sesgos de las conexiones entre las neuronas.</li>
        <li><strong>Propagación hacia adelante (Forward Propagation):</strong>Los datos de entrada se pasan a través de la red neuronal, capa por capa, y se calculan las salidas de cada neurona utilizando una función de activación.</li>
        <li><strong>Cálculo de la función de pérdida (Loss Function):</strong> Se compara la salida predicha de la red con las respuestas reales, calculando una medida de la discrepancia entre ellas (pérdida o error).</li>
        <li><strong>Propagación hacia atrás (Backward Propagation):</strong> Se utiliza un algoritmo llamado descenso de gradiente para calcular la derivada de la función de pérdida con respecto a cada peso y sesgo en la red. Estas derivadas indican cómo cambiar los pesos y sesgos para reducir la pérdida.</li>
        <li><strong>Actualización de pesos (Weight Update):</strong> Se ajustan los pesos y sesgos en la dirección que reduce la pérdida utilizando un método de optimización, como el descenso de gradiente estocástico (SGD) o algoritmos más avanzados como Adam o RMSprop.</li>
        <li><strong>Repetición del proceso:</strong> Se repiten los pasos 2 a 5 para cada lote de datos de entrenamiento durante múltiples épocas (iteraciones completas a través de todos los datos de entrenamiento) hasta que la red neuronal converge y la pérdida se minimiza.</li>
    </ul>    
    <p></p>

    </article>  

<%- include("./partials/footer.ejs") %>